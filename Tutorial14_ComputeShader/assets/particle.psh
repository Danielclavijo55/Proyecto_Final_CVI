
struct PSInput 
{ 
    float4 Pos  : SV_POSITION; 
    float2 uv   : TEX_COORD;
    float  Temp : TEMPERATURE;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    float r = length(PSIn.uv.xy - float2(0.5, 0.5)) * 2.0;
    if(r > 1.0)
        discard;

    // Aumentar brillo e intensidad de las partículas
    float intensity = pow(saturate(1.0 - r), 0.8) * 1.5;
    
    // Usar colores más brillantes y variados según temperatura
    float3 coolColor = float3(0.0, 0.7, 1.0); // Azul brillante
    float3 hotColor = float3(1.0, 0.9, 0.2);  // Amarillo brillante
    
    float3 Color = lerp(coolColor, hotColor, PSIn.Temp) * intensity;
    
    // Añadir un resplandor central
    float glow = pow(1.0 - r, 3.0) * 2.0;
    Color += float3(1.0, 1.0, 1.0) * glow;
    
#if CONVERT_PS_OUTPUT_TO_GAMMA
    // Use fast approximation for gamma correction.
    Color = pow(Color, float3(1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));
#endif

    // Aumentar opacidad para mejor visibilidad
    PSOut.Color = float4(Color, sqrt(intensity) * 1.2);
}